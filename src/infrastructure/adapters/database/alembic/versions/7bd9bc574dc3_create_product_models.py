"""create product models

Revision ID: 7bd9bc574dc3
Revises: b1d69a7183d9
Create Date: 2022-10-28 14:56:32.583240

"""
from alembic import op
import sqlalchemy as sa
# Import to no generate error in migrations
import sqlalchemy_utils
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '7bd9bc574dc3'
down_revision = 'b1d69a7183d9'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('basic_products',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('basic_product', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('basic_product'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('incoterms',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('incoterm', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('incoterm'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('minimums_order',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('minimum_order', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('minimum_order'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('status_product',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('status_product', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=250), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('status_product'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('sustainability_certifications',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('certification', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('certification'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('product_files',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('name', sa.String(length=250), nullable=True),
    sa.Column('url', sa.String(length=250), nullable=True),
    sa.Column('status_file_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['status_file_id'], ['status_file.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('products_type',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('product_type', sa.String(length=50), nullable=False),
    sa.Column('basic_product_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['basic_product_id'], ['basic_products.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('varieties',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('variety', sa.String(length=50), nullable=False),
    sa.Column('basic_product_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['basic_product_id'], ['basic_products.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('uuid'),
    sa.UniqueConstraint('variety')
    )
    op.create_table('products',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('status_id', sa.Integer(), nullable=True),
    sa.Column('basic_product_id', sa.Integer(), nullable=True),
    sa.Column('product_type_id', sa.Integer(), nullable=True),
    sa.Column('variety_id', sa.Integer(), nullable=True),
    sa.Column('capacity_per_year', sa.Integer(), nullable=False),
    sa.Column('date_in_port', sa.Date(), nullable=False),
    sa.Column('guild_or_association', sa.String(length=250), nullable=False),
    sa.Column('available_for_sale', sa.Numeric(), nullable=False, comment='How much the company has available for sale (kg)'),
    sa.Column('minimum_order_id', sa.Integer(), nullable=True),
    sa.Column('expected_price_per_kg', sa.Numeric(), nullable=False, comment='Expected price per kg (USD)'),
    sa.Column('incoterm_id', sa.Integer(), nullable=True),
    sa.Column('assistance_logistic', sa.Boolean(), nullable=False),
    sa.Column('additional_description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['basic_product_id'], ['basic_products.id'], ),
    sa.ForeignKeyConstraint(['incoterm_id'], ['incoterms.id'], ),
    sa.ForeignKeyConstraint(['minimum_order_id'], ['minimums_order.id'], ),
    sa.ForeignKeyConstraint(['product_type_id'], ['products_type.id'], ),
    sa.ForeignKeyConstraint(['status_id'], ['status_product.id'], ),
    sa.ForeignKeyConstraint(['variety_id'], ['varieties.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('company_products',
    sa.Column('company_id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('company_id', 'product_id')
    )
    op.create_table('product_sustainability_certifications',
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('sustainability_certification_id', sa.Integer(), nullable=False),
    sa.Column('file_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['file_id'], ['product_files.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['sustainability_certification_id'], ['sustainability_certifications.id'], ),
    sa.PrimaryKeyConstraint('product_id', 'sustainability_certification_id', 'file_id')
    )
    op.drop_table('databasechangelog', schema='db-test-bazar-auth')
    op.drop_table('databasechangeloglock', schema='db-test-bazar-auth')
    op.drop_table('roles')
    op.drop_table('static_contents')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('static_contents',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('file_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('url', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('uuid', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('person_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='static_contents_pkey'),
    sa.UniqueConstraint('uuid', name='uk_q80g3skb3uafu1x6a89abel7i')
    )
    op.create_table('roles',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('uuid', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='roles_pkey'),
    sa.UniqueConstraint('uuid', name='uk_nkk65tixbbb079hmpll7ntkb3')
    )
    op.create_table('databasechangeloglock',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('locked', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('lockgranted', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('lockedby', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='databasechangeloglock_pkey'),
    schema='db-test-bazar-auth'
    )
    op.create_table('databasechangelog',
    sa.Column('id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('author', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('filename', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('dateexecuted', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('orderexecuted', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('exectype', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('md5sum', sa.VARCHAR(length=35), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('comments', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('tag', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('liquibase', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('contexts', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('labels', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('deployment_id', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    schema='db-test-bazar-auth'
    )
    op.drop_table('product_sustainability_certifications')
    op.drop_table('company_products')
    op.drop_table('products')
    op.drop_table('varieties')
    op.drop_table('products_type')
    op.drop_table('product_files')
    op.drop_table('sustainability_certifications')
    op.drop_table('status_product')
    op.drop_table('minimums_order')
    op.drop_table('incoterms')
    op.drop_table('basic_products')
    # ### end Alembic commands ###
